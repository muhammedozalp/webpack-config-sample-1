/* eslint-disable prefer-destructuring */
/* eslint-disable import/no-extraneous-dependencies */
/* eslint-disable class-methods-use-this */
/* eslint-disable no-unused-vars */
/* eslint-disable max-classes-per-file */
/* eslint-disable object-curly-spacing */
/* eslint-disable object-curly-newline */

/**
 * DOCUMENTATION
 *
 * 1. babel
 * to be able to use babel with webpack
 * install followings
 * "@babel/core": "^7.14.3",
 * "@babel/preset-env": "^7.14.4",
 * "babel-loader": "^8.2.2",
 * "core-js": "^3.14.0", => some other feature support for old browsers
 * "regenerator-runtime": "^0.13.7", => for async-await support for old browsers
 *
 * 2.
 *
 */

/**
 * DOCUMENTATION yarn add only specific version
 * yarn add print-js@1.0.40 --exact
 */

const path = require('path');
const webpack = require('webpack');
const { merge } = require('webpack-merge');

const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;
const CopyPlugin = require('copy-webpack-plugin');
const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
const Dotenv = require('dotenv-webpack');
const FileManagerPlugin = require('filemanager-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const TerserPlugin = require('terser-webpack-plugin');
const { WebpackManifestPlugin } = require('webpack-manifest-plugin');

const HashedDomreadyAssetsPlugin = require('./plugin/HashedDomreadyAssetsPlugin.js');

const { error, info, text, success, successBg, warning } = require('./settings.logs.js');
const { assets, src } = require('./settings.paths.js');
const { babelLoaderConfig, browserslist, entries, entryPaths, hasReport, mode, runtimeEnv, statistics, isWatching } = require('./settings.webpack.js');

const domReadyAssets = {};

const manifestSharedSeed = {};

const manifestOptions = {
    fileName: 'webpack-manifest.json',
    seed: manifestSharedSeed
};

const beforeCompilationRemoveAssetsDefaultFolder = [
    {
        source: assets.default,
        options: {
            force: true
        }
    }
];

const onCompilationEndRemoveCssAutoGeneratedFilesFolder = [
    {
        source: `${assets.css}/auto_generated_files`,
        options: {
            // NOTE Use this option if target dir is out of package.json dir
            force: true
        }
    }
];

const copyFiles = [
    {
        from: path.resolve(__dirname, '../src/js/library/masterpass/masterpass-custom.js'),
        to: 'js/library/masterpass/masterpass-[contenthash].min.js'
    },
    {
        from: path.resolve(__dirname, '../src/js/library/masterpass/masterpass-mfs-client.min.js'),
        to: 'js/library/masterpass/masterpass-mfs-client-[contenthash].min.js'
    },
    {
        from: src.img,
        to: assets.img
    }
];

const configureBabelLoader = (browserList) => ({
    test: /\.js$/,
    exclude: babelLoaderConfig.exclude,
    use: {
        loader: 'babel-loader',
        options: {
            /**
             * NOTE:
             * sourceType: 'unambiguous',
             * option is preventing debug: true to work properly
             */
            // sourceType: 'unambiguous',
            include: babelLoaderConfig.include,
            presets: [
                [
                    '@babel/preset-env', {
                        corejs: {
                            version: '3.18.2',
                            proposals: true
                        },
                        useBuiltIns: 'usage',
                        targets: {
                            /**
                            * DOCUMENTATION
                            * analytics datasına bakılarak
                            * sipariş gelen versiyonlar dikkate alındı - Mart 2021
                            * versiyonlar her sene güncellenebilir.
                            */
                            browsers: browserList
                        },
                        debug: babelLoaderConfig.debug
                    }
                ]
            ]
        }
    }
});

const optimizationMangleFuncNames = {
    usedExports: true,
    minimize: mode !== 'development',
    minimizer: [
        new TerserPlugin({
            extractComments: {
                condition: true,
                filename: 'ALL.LICENSE.txt',
                banner: (licenseFile) => `License information can be found in ${licenseFile}`
            },
            terserOptions: {
                compress: mode !== 'development',
                mangle: mode !== 'development',
                keep_fnames: false
            }
        }),
        new CssMinimizerPlugin({
            minimizerOptions: {
                preset: [
                    'default',
                    {
                        discardComments: {
                            removeAll: true
                        }
                    }
                ]
            }
        })
    ]
};

const optimizationKeepFuncNames = {
    usedExports: true,
    minimize: mode !== 'development',
    minimizer: [
        new TerserPlugin({
            extractComments: {
                condition: true,
                filename: 'ALL.LICENSE.txt',
                banner: (licenseFile) => `License information can be found in ${licenseFile}`
            },
            terserOptions: {
                compress: mode !== 'development',
                mangle: mode !== 'development',
                keep_fnames: true
            }
        }),
        new CssMinimizerPlugin({
            minimizerOptions: {
                preset: [
                    'default',
                    {
                        discardComments: {
                            removeAll: true
                        }
                    }
                ]
            }
        })
    ]
};

const performance = {
    hints: 'warning',
    maxEntrypointSize: 100000,
    maxAssetSize: 100000
};

const rulesExposeJquery351 = {
    // DOCUMENTATION jquery 3.5.1 hem chrome hem IE için ihtiyaç duyuyor.
    test: require.resolve('../src/js/library/jquery/jquery-3.5.1.min.js'),
    loader: 'expose-loader',
    options: {
        exposes: ['$', 'jQuery']
    }
};

const rulesExposeSwiper = {
    /**
     * DOCUMENTATION
     * swiper-4.5.3.min.js chrome da `Swiper is not defined`
     * ve IE de `Swiper is undefined` hatası almamak için gerekli
     */
    test: require.resolve('../src/js/library/swiper/swiper-4.5.3.min.js'),
    loader: 'expose-loader',
    options: {
        exposes: ['swiper', 'Swiper']
    }
};

const rulesCss = {
    test: /\.css$/i,
    exclude: /node_modules/,
    use: [
        {
            loader: MiniCssExtractPlugin.loader
        },
        {
            loader: 'css-loader',
            options: {
                sourceMap: true,
                importLoaders: 1
            }
        },
        {
            loader: 'postcss-loader',
            options: {
                sourceMap: true,
                postcssOptions: {
                    plugins: [
                        [
                            'postcss-preset-env',
                            {
                                /**
                                 * DOCUMENTATION
                                 * Options
                                 * autoprefixer: {} is automatically added
                                 * no need to install autoprefixer
                                 */
                                browsers: browserslist.legacyBrowsers
                            }
                        ]
                    ]
                }
            }
        }
    ]
};

const rulesFont = {
    test: /\.(eot|svg|ttf|woff|woff2)$/i,
    use: [
        {
            loader: 'file-loader',
            options: {
                name: '[name].[ext]',
                emitFile: true,
                // eslint-disable-next-line no-unused-vars
                outputPath: (url, resourcePath, context) => {
                    /**
                     * DOCUMENTATION
                     * css dosyasında adı geçen resmin kendisinin
                     * output directory de js klasörüne göre relative olarak
                     * hangi klasöre çıkarılacağının tanımlandığı yer.
                     *
                     * url:
                     * resmin adı ve uzantısı
                     *
                     * resourcePath:
                     * resmin src de bulunduğu klasörün yolu
                     * bu yolu src dek css dosyasında geçtiği
                     * backgroun-image urlsindeki relative adrese göre belirleniyor
                     *
                     * context: output.path de belirtilen klasör adresi
                     *
                     * DOCUMENTATION
                     * It may be shorter if functional approach is used
                     * but this way is more readable
                     *
                     * relativePath: gets src address of img
                     * relativePathWeb: convert slashes according to web
                     * removeSrc: removes `src` dir name
                     * addUrl: is the absolute path without image name and ext
                     * url: is the name of image and ext
                     * absolutePath: `path` + `image`
                     */

                    const relativePath = path.relative(context, resourcePath);
                    const relativePathWeb = relativePath.split('\\').join('/');
                    const removeSrc = relativePathWeb.split('src/').join('');
                    const addUrl = removeSrc.split(url).join('');

                    let imgPath = '';

                    /**
                     * NOTE
                     * if there is any fonts coming from node_modules
                     * it has be to handled additionally as follows:
                     *
                     * if (relativePathWeb.includes('node_modules/intl-tel-input/')) {
                     *     imgPath = `js/library/intltelinput/${url}`;
                     * } else {
                     *     imgPath = `${addUrl}${url}`;
                     * }
                     */
                    if (relativePathWeb.includes('scss/library/font_awesome/')) {
                        imgPath = `css/font_awesome/fonts/${url}`;
                    } else {
                        imgPath = `${addUrl}${url}`;
                    }

                    return imgPath;
                },
                // eslint-disable-next-line no-unused-vars
                publicPath: (url, resourcePath, context) => {
                    /**
                     * DOCUMENTATION
                     * output css dosyasındaki
                     * background-image: url() deki image ın yolunu düzenler.
                     */

                    const relativePath = path.relative(context, resourcePath);
                    const relativePathWeb = relativePath.split('\\').join('/');
                    const removeSrc = relativePathWeb.split('src/').join('');
                    const addUrl = removeSrc.split(url).join('');
                    const absolutePath = `${assets.baseUrl}${addUrl}${url}`;

                    // console.log(`absolutePath: ${absolutePath}`);

                    /**
                     * NOTE
                     * if there is any fonts coming from node_modules
                     * it has be to handled additionally as follows
                     */
                    // if (relativePathWeb.includes('node_modules/intl-tel-input')) {
                    //     /**
                    //      * DOCUMENTATION
                    //      * `intl-tel-input` is different
                    //      * its relative url is not points ./src folder
                    //      * because its images comes from node_modules
                    //      */
                    //     imgPath = `${assets.baseUrl}js/library/intltelinput/${url}`;
                    // } else {
                    //     imgPath = absolutePath;
                    // }

                    let imgPath = '';

                    if (relativePathWeb.includes('scss/library/font_awesome/')) {
                        /**
                         * DOCUMENTATION
                         * `intl-tel-input` is different
                         * its relative url
                         * because its images comes from node_modules
                         */

                        imgPath = `${assets.baseUrl}css/font_awesome/fonts/${url}`;
                    } else {
                        imgPath = absolutePath;
                    }

                    return imgPath;
                }
            }
        }
    ],
    /**
     * DOCUMENTATION
     * When using the old assets loaders
     * (i.e. file-loader/url-loader/raw-loader)
     * along with Asset Module in webpack 5,
     * you might want to stop Asset Module from processing your assets again
     * as that would result in asset duplication.
     * This can be done by setting asset's module type to 'javascript/auto'.
     */
    type: 'javascript/auto'
};

/**
 * DOCUMENTATION
 * css dosyasından
 * background-image: url() ile çağırılan resimler
 * path olarak 2 'e ayrılır.
 *
 * 1.
 * node_modules 'ten çağırılan resimler.
 * Diğerlerinin ortak özelliği
 * src deki klasör yolları ile
 * assets deki klasör yolları benzerdir.
 * srcden alıp benzer yolu assets 'e uygulayabiliriz
 * ama resim node_modules 'ten geldiğinde
 * klasör yapısında ortak olan hiçbir şey yoktur.
 * 2.
 * assets/default/img klasöründen çağırılan
 * ve başka css dosyalarının da kullandığı ortak resimlerdir.
 * library js dosyasına ait olan resimlerdir
 * ve output klasörü de yine aynı library js klasörüdür
 */
const rulesImage = {
    test: /\.(png|jpg|jpeg|gif)$/i,
    use: [
        {
            loader: 'file-loader',
            options: {
                name: '[name].[ext]',
                emitFile: true,
                // eslint-disable-next-line no-unused-vars
                outputPath: (url, resourcePath, context) => {
                    /**
                     * DOCUMENTATION
                     * css dosyasında adı geçen resmin kendisinin
                     * output directory de js klasörüne göre relative olarak
                     * hangi klasöre çıkarılacağının tanımlandığı yer.
                     *
                     * url:
                     * resmin adı ve uzantısı
                     *
                     * resourcePath:
                     * resmin src de bulunduğu klasörün yolu
                     * bu yolu src dek css dosyasında geçtiği
                     * backgroun-image urlsindeki relative adrese göre belirleniyor
                     *
                     * context: output.path de belirtilen klasör adresi
                     *
                     * DOCUMENTATION
                     * It may be shorter if functional approach is used
                     * but this way is more readable
                     *
                     * relativePath: gets src address of img
                     * relativePathWeb: convert slashes according to web
                     * removeSrc: removes `src` dir name
                     * addUrl: is the absolute path without image name and ext
                     * url: is the name of image and ext
                     * absolutePath: `path` + `image`
                     */

                    const relativePath = path.relative(context, resourcePath);
                    const relativePathWeb = relativePath.split('\\').join('/');
                    const removeSrc = relativePathWeb.split('src/').join('');
                    const addUrl = removeSrc.split(url).join('');

                    let imgPath = '';

                    if (relativePathWeb.includes('node_modules/intl-tel-input/')) {
                        imgPath = `js/library/intl_tel_input/${url}`;
                    } else {
                        imgPath = `${addUrl}${url}`;
                    }

                    return imgPath;
                },
                // eslint-disable-next-line no-unused-vars
                publicPath: (url, resourcePath, context) => {
                    /**
                     * DOCUMENTATION
                     * output css dosyasındaki
                     * background-image: url() deki image ın yolunu düzenler.
                     */

                    const relativePath = path.relative(context, resourcePath);
                    const relativePathWeb = relativePath.split('\\').join('/');
                    const removeSrc = relativePathWeb.split('src/').join('');
                    const addUrl = removeSrc.split(url).join('');
                    const absolutePath = `${assets.baseUrl}${addUrl}${url}`;

                    let imgPath = '';

                    if (relativePathWeb.includes('node_modules/intl-tel-input')) {
                        /**
                         * DOCUMENTATION
                         * `intl-tel-input` is different
                         * its relative url
                         * because its images comes from node_modules
                         */

                        imgPath = `${assets.baseUrl}js/library/intl_tel_input/${url}`;
                    } else {
                        imgPath = absolutePath;
                    }

                    return imgPath;
                }
            }
        }
    ],
    /**
     * DOCUMENTATION
     * When using the old assets loaders
     * (i.e. file-loader/url-loader/raw-loader)
     * along with Asset Module in webpack 5,
     * you might want to stop Asset Module from processing your assets again
     * as that would result in asset duplication.
     * This can be done by setting asset's module type to 'javascript/auto'.
     */
    type: 'javascript/auto'
};

const rulesScss = {
    test: /\.scss$/i,
    exclude: /node_modules/,
    use: [
        {
            loader: MiniCssExtractPlugin.loader,
            options: {
                emit: true
            }
        },
        {
            loader: 'css-loader',
            options: {
                sourceMap: true,
                importLoaders: 1
            }
        },
        {
            loader: 'postcss-loader',
            options: {
                sourceMap: true,
                postcssOptions: {
                    plugins: [
                        [
                            'postcss-preset-env',
                            {
                                /**
                                 * DOCUMENTATION
                                 * Options
                                 * autoprefixer: {} is automatically added
                                 */
                                browsers: browserslist.legacyBrowsers
                            }
                        ]
                    ]
                }
            }
        },
        {
            loader: 'sass-loader',
            options: {
                // NOTE: Prefering `dart-sass`
                implementation: require.resolve('sass'),
                sourceMap: true,
                sassOptions: {
                    outputStyle: mode === 'development' ? 'expanded' : 'compressed'
                }
            }
        }
    ]
};

const baseConfig = (configType) => ({
    mode,
    /**
     * NOTE:
     * cache filesystem hızlı development için kullanılabilir
     * Ama filesystem kullanıldığında babel debug istatistikleri
     * terminalde düzgün görüntülenemediğinden kullanmıyoruz.
     */
    cache: false,
    devtool: mode === 'development' ? 'source-map' : false,
    module: {
        rules: [
            configureBabelLoader(Object.values(configType === 'legacy' ? browserslist.legacyBrowsers : browserslist.modernBrowsers))
        ]
    },
    plugins: [
        new WebpackManifestPlugin(manifestOptions)
    ],
    output: {
        iife: configType !== 'legacy',
        environment: {
            arrowFunction: configType !== 'legacy'
        },
        path: assets.default,
        publicPath: ''
    },
    performance,
    resolve: {
        alias: {
            JsRoot: path.resolve(__dirname, '../src/js/')
        }
    }
});

const appConfig = merge(baseConfig('legacy'), {
    name: 'appConfig',
    entry: entries.app,
    target: ['web', 'es5'],
    optimization: optimizationMangleFuncNames,
    plugins: [
        new Dotenv({
            path: '../../../../../.env'
        }),
        new FileManagerPlugin({
            events: {
                onStart: {
                    delete: beforeCompilationRemoveAssetsDefaultFolder
                }
            },
            runOnceInWatchMode: true
        })
    ]
});

const commonConfig = merge(baseConfig('legacy'), {
    name: 'commonConfig',
    entry: entries.common,
    optimization: optimizationKeepFuncNames
});

const indexDomreadyLegacyConfig = merge(baseConfig('legacy'), {
    name: 'indexDomreadyLegacyConfig',
    entry: entries.indexDomreadyLegacy,
    target: ['web', 'es5'],
    optimization: optimizationMangleFuncNames,
    output: {
        iife: true
    },
    plugins: [
        new Dotenv({
            path: '../../../../../.env'
        }),
        new HashedDomreadyAssetsPlugin(domReadyAssets, runtimeEnv)
    ]
});

const indexDomreadyModernConfig = merge(baseConfig('modern'), {
    name: 'indexDomreadyModernConfig',
    entry: entries.indexDomreadyModern,
    optimization: optimizationMangleFuncNames,
    plugins: [
        new Dotenv({
            path: '../../../../../.env'
        }),
        new HashedDomreadyAssetsPlugin(domReadyAssets, runtimeEnv)
    ]
});

const indexPreloadLegacyConfig = merge(baseConfig('legacy'), {
    name: 'indexPreloadLegacyConfig',
    entry: entries.indexPreloadLegacy,
    target: ['web', 'es5'],
    optimization: optimizationMangleFuncNames,
    output: {
        iife: true
    },
    plugins: [
        new FileManagerPlugin({
            events: {
                onEnd: {
                    delete: onCompilationEndRemoveCssAutoGeneratedFilesFolder
                }
            },
            runOnceInWatchMode: true
        })
    ],
    module: {
        rules: [
            {
                test: /\.js$/,
                use: {
                    loader: path.resolve(__dirname, 'loader/content-replace-loader.js'),
                    options: {
                        params: domReadyAssets
                    }
                }
            }
        ]
    }
});

const pagesDomreadyLegacyConfig = merge(baseConfig('legacy'), {
    name: 'pagesDomreadyLegacyConfig',
    entry: entries.pagesDomreadyLegacy,
    target: ['web', 'es5'],
    optimization: optimizationMangleFuncNames,
    output: {
        iife: true
    },
    plugins: [
        new Dotenv({
            path: '../../../../../.env'
        }),
        new HashedDomreadyAssetsPlugin(domReadyAssets, runtimeEnv)
    ]
});

const pagesDomreadyModernConfig = merge(baseConfig('modern'), {
    name: 'pagesDomreadyModernConfig',
    entry: entries.pagesDomreadyModern,
    optimization: optimizationMangleFuncNames,
    plugins: [
        new Dotenv({
            path: '../../../../../.env'
        }),
        new HashedDomreadyAssetsPlugin(domReadyAssets, runtimeEnv)
    ]
});

const intlTelInputConfig = merge(baseConfig('legacy'), {
    name: 'intlTelInputConfig',
    entry: entries.intlTelInput,
    optimization: optimizationMangleFuncNames,
    output: {
        iife: true
    },
    module: {
        rules: [
            rulesImage,
            rulesScss
        ]
    },
    plugins: [
        new MiniCssExtractPlugin({
            filename: entryPaths.intlTelInput['intl-tel-input-style'].miniCssExtractOutputPaths
        })
    ]
});

const libraryConfig = merge(baseConfig('legacy'), {
    name: 'libraryConfig',
    entry: entries.library,
    optimization: optimizationMangleFuncNames,
    module: {
        rules: [
            rulesCss,
            rulesFont,
            rulesImage,
            rulesScss,
            rulesExposeJquery351,
            rulesExposeSwiper
        ]
    },
    plugins: [
        new CopyPlugin({
            patterns: copyFiles
        }),
        new MiniCssExtractPlugin({
            filename: ({ chunk }) => {
                let fileNm = '';

                if (chunk.name === 'font-awesome') fileNm = entryPaths.library['font-awesome'].miniCssExtractOutputPaths;
                else if (chunk.name === 'jquery-jbox-style') fileNm = entryPaths.library['jquery-jbox-style'].miniCssExtractOutputPaths;
                else if (chunk.name === 'jquery-jcarousel-style') fileNm = entryPaths.library['jquery-jcarousel-style'].miniCssExtractOutputPaths;
                else if (chunk.name === 'jquery-ui-style') fileNm = entryPaths.library['jquery-ui-style'].miniCssExtractOutputPaths;
                else if (chunk.name === 'magiczoom-style') fileNm = entryPaths.library['magiczoom-style'].miniCssExtractOutputPaths;
                else if (chunk.name === 'jquery-rating-style') fileNm = entryPaths.library['jquery-rating-style'].miniCssExtractOutputPaths;
                else if (chunk.name === 'stylesheet') fileNm = entryPaths.library.stylesheet.miniCssExtractOutputPaths;
                else if (chunk.name === 'swiper-style') fileNm = entryPaths.library['swiper-style'].miniCssExtractOutputPaths;
                else if (chunk.name === 'jquery-treeview-style') fileNm = entryPaths.library['jquery-treeview-style'].miniCssExtractOutputPaths;

                return fileNm;
            }
        }),
        new HashedDomreadyAssetsPlugin(domReadyAssets, runtimeEnv)
    ],
    externals: {
        $: 'jQuery',
        jquery: 'jQuery',
        jQuery: 'jQuery',
        'window.jQuery': 'jquery'
    }
});

const partialConfig = merge(baseConfig('legacy'), {
    name: 'partialConfig',
    entry: entries.partial,
    optimization: optimizationKeepFuncNames
});

const configureBundleAnalyzeReport = (configType) => {
    const d = new Date();
    const id = `${(d.getMonth() + 1).toString()}_${d.getDate().toString()}_${d.getHours().toString()}.${d.getMinutes().toString()}.${d.getSeconds().toString()}`;

    // console.log(`Creating Bundle Report: ${src.reportPath}${id}__${configType.name}.html`);
    info(`Creating Bundle Report: ${src.reportPath}/reports/${id}__${configType.name}.html`);
    configType.plugins.push(new BundleAnalyzerPlugin({
        excludeAssets: ['auto_generated_files'],
        /**
         * DOCUMENTATION
         * statsOptions: {
         *     exclude: ['node_modules', 'dev', 'vendor'],
         *     hash: false,
         *     cached: false,
         *     cachedAssets: false,
         *     reasons: false,
         *     source: true,
         *     warnings: false,
         *     errors: false,
         *     errorDetails: false,
         *     publicPath: false,
         *     modulesSort: 'size',
         *     chunksSort: 'size',
         *     assetsSort: 'size'
         * },
         * analyzerPort: 4200,
         * openAnalyzer: true,
         */
        openAnalyzer: false,
        generateStatsFile: true,
        analyzerMode: 'static',
        /**
         * DOCUMENTATION
         * json stats files would be analyze at the following urls:
         * https://webpack.github.io/analyse/
         * https://chrisbateman.github.io/webpack-visualizer/
         * https://statoscope.tech/#diff&hash=1b14cc8ab703938b60a2&diffWith=6764c613c08d2ff5e1bb
         */
        statsFilename: `${src.reportPath}/reports/${id}__${configType.name}.json`,
        reportFilename: `${src.reportPath}/reports/${id}__${configType.name}.html`,
        reportTitle: `${configType.name} bundle analyzer`
    }));
};

if (hasReport) {
    configureBundleAnalyzeReport(appConfig);
    configureBundleAnalyzeReport(commonConfig);
    configureBundleAnalyzeReport(indexPreloadLegacyConfig);
    configureBundleAnalyzeReport(indexDomreadyLegacyConfig);
    configureBundleAnalyzeReport(indexDomreadyModernConfig);
    configureBundleAnalyzeReport(pagesDomreadyLegacyConfig);
    configureBundleAnalyzeReport(pagesDomreadyModernConfig);
    configureBundleAnalyzeReport(intlTelInputConfig);
    configureBundleAnalyzeReport(libraryConfig);
    configureBundleAnalyzeReport(partialConfig);
}

const createCompiler = (config) => {
    const compiler = webpack(config);

    return () => new Promise((resolve, reject) => {
        // eslint-disable-next-line no-shadow
        compiler.run((err, stats) => {
            if (err) {
                error(err.stack || err);

                if (err.details) {
                    error(err.details);
                }
                return reject(err);
            }

            const information = stats.toJson();

            if (stats.hasErrors()) {
                error(information.errors);
            }

            if (stats.hasWarnings()) {
                warning(information.warnings);
            }

            if (mode === 'development') {
                info(`\n=> ${compiler.name} statistics started`);
            }

            text(`\n${stats.toString(statistics)}\n`);

            if (mode === 'development') {
                success(`=> ${compiler.name} statistics completed`);
            }

            // NOTE for more info https://webpack.js.org/api/node/#run
            compiler.close((closeErr) => {
                if (closeErr) throw closeErr;
            });

            return resolve();
        });
    });
};

const compileApp = createCompiler(appConfig);
const compileCommon = createCompiler(commonConfig);
const compilePartial = createCompiler(partialConfig);
const compileIntlTelInput = createCompiler(intlTelInputConfig);
const compileLibrary = createCompiler(libraryConfig);
const compilePagesDomreadyLegacy = createCompiler(pagesDomreadyLegacyConfig);
const compilePagesDomreadyModern = createCompiler(pagesDomreadyModernConfig);
const compileIndexDomreadyLegacy = createCompiler(indexDomreadyLegacyConfig);
const compileIndexDomreadyModern = createCompiler(indexDomreadyModernConfig);
const compileIndexPreloadLegacy = createCompiler(indexPreloadLegacyConfig);

const configInfo = (taskNumber, msg) => {
    successBg(`\nTask ${taskNumber} / 10 => Compiling ${msg} Config Assets`);
};

module.exports.app = async () => { configInfo(1, 'App'); await compileApp(); };
module.exports.common = async () => { configInfo(2, 'Common'); await compileCommon(); };
module.exports.partial = async () => { configInfo(3, 'Partial'); await compilePartial(); };
module.exports.intlTelInput = async () => { configInfo(4, 'IntlTelInput'); await compileIntlTelInput(); };
module.exports.library = async () => { configInfo(5, 'Library'); await compileLibrary(); };
module.exports.pagesDomreadyLegacy = async () => { configInfo(6, 'PagesDomreadyLegacy'); await compilePagesDomreadyLegacy(); };
module.exports.pagesDomreadyModern = async () => { configInfo(7, 'PagesDomreadyModern'); await compilePagesDomreadyModern(); };
module.exports.indexDomreadyLegacy = async () => { configInfo(8, 'IndexDomreadyLegacy'); await compileIndexDomreadyLegacy(); };
module.exports.indexDomreadyModern = async () => { configInfo(9, 'IndexDomreadyModern'); await compileIndexDomreadyModern(); };
module.exports.indexPreloadLegacy = async () => { configInfo(10, 'IndexPreloadLegacy'); await compileIndexPreloadLegacy(); };
